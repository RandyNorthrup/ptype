beginner:
- "print('Hello World')"
- "for i in range(10):"
- "if x > 5:"
- "def calculate():"
- "return result"
- "items.append(item)"
- "import os"
- "config = {'host': 'localhost'}"
- "try:\n    risky_operation()\nexcept:"
- "class Rectangle:"
- "len(my_list)"
- "str(number)"
- "int('42')"
- "print(42)"
- "print(name)"
- "for j in range(5):"
- "if count < 10:"
- "def process_data():"
- "return None"
- "items.pop(0)"
- "import sys"
- "config['port'] = 8080"
- "try:\n    open('file.txt')\nexcept FileNotFoundError:"
- "class Calculator:"
- "len(text)"
- "str(123)"
- "int(value)"

intermediate:
- "from typing import List, Dict"
- "@dataclass\nclass User:"
- "with open('file.txt') as f:"
- "[x * 2 for x in numbers]"
- "functools.reduce(add, numbers)"
- "collections.Counter(words)"
- "pathlib.Path('/home/user')"
- "datetime.datetime.now()"
- "requests.get('http://api').json()"
- "json.dumps(data, indent=2)"
- "from typing import Optional"
- "@dataclass\nclass Product:"
- "with open('data.csv', 'r') as f:"
- "[item.upper() for item in names]"
- "functools.reduce(operator.mul, values)"
- "collections.defaultdict(list)"
- "pathlib.Path.cwd()"
- "datetime.date.today()"
- "urllib.request.urlopen(url)"
- "json.loads(response.text)"

advanced:
- "async with aiohttp.ClientSession() as session:"
- "class APIClient(Generic[T]):"
- "df.query('age > 25')"
- "torch.nn.Linear(10, 5)"
- "SELECT * FROM users WHERE active = 1"
- "docker build -t myapp:latest ."
- "async with httpx.AsyncClient() as client:"
- "class Repository[T]:"
- "df.groupby('category')['amount'].sum()"
- "model = torch.nn.Sequential(...)"
- "SELECT u.* FROM users u JOIN profiles p ON u.id = p.user_id"
- "docker-compose up -d postgres redis"
