advanced:
- auto lambda = (auto... args) constexpr  return (args + ...)
- template typename T concept Printable = requires(T t)  cout  t
- template typename T void print(T t) requires PrintableT  cout  t  endl
- std  arrayint, 10 arr = 1, 2, 3
- std  tupleint, string, double tuple = 1, hello, 3.14
- std  variantint, string, double variant  variant = 42
- std  optionalint maybe = compute()  if (maybe)  use(*maybe)
- std  unique_ptrResource ptr = std  make_uniqueResource()
- std  shared_ptrResource shared = std  make_sharedResource()
- std  weak_ptrResource weak = shared
- std  any any_value = 42  any_value = hello
- std  string_view sv = hello
- std  spanint span = arr
- std  filesystem  path path = data.txt
- std  filesystem  directory_iterator dir(.)
- std  chrono  system_clock  now()
- std  chrono  durationdouble elapsed = end - start
- std  mutex mtx  std  lock_guardstd  mutex lock(mtx)
- std  condition_variable cv  std  unique_lockstd  mutex lk(mtx)  cv.wait(lk)
- std  atomicint atomic_value = 0
- std  thread t(() work()  )  t.join()
- std  async(std  launch  async, heavy_computation)
- std  promiseint p  std  futureint f = p.get_future()
- static_assert(sizeof(int) = 4, int too small)
- constexpr int fibonacci(int n)  return n = 1 ? n   fibonacci(n-1) + fibonacci(n-2)
- if constexpr (std  is_pointer_vT)
- auto a, b, c = std  tuple1, 2.0, hello
beginner:
- '#include iostream'
- using namespace std
- cout  Hello World  endl
- cout  Text output
- int array10
- string words5
- vectorstring list
- list.push_back(item)
- list.erase(remove(list.begin(), list.end(), item), list.end())
- list.empty()
- find(list.begin(), list.end(), value) != list.end()
- list.at(0)
- list0 = new value
- for (auto item   list)
- try   catch (runtime_error e)
- stoi(123)
- stod(3.14)
- stof(1.5)
- sqrt(16)
- max(5, 10)
- min(5, 10)
- abs(-5)
- rand() / (double)RAND_MAX
- pow(2, 3)
- round(3.7)
- floor(3.7)
- ceil(3.2)
intermediate:
- void functionName()
- int calculateSum(int a, int b)
- string processData(vectorstring data)
- const int CONSTANT = 100
- static const string CONFIG = config
- class MyClass  public  MyClass()   value(0)  private  int value
- cout  *this
- bool operator==(const MyClass other) const
- size_t hash() const
- sort(list.begin(), list.end())
- reverse(list.begin(), list.end())
- random_shuffle(list.begin(), list.end())
- '*max_element(list.begin(), list.end())'
- '*min_element(list.begin(), list.end())'
- vectorstring filtered  copy_if(list.begin(), list.end(), back_inserter(filtered),
  (const string s) return s.length()  3  )
- mapstring, int counts  for (auto item   list) countsitem++
- auto it = find(list.begin(), list.end(), value)
- count_if(list.begin(), list.end(), (const string s) return s.find(test) == 0  )
- transform(list.begin(), list.end(), list.begin(), (string s) transform(s.begin(),
  s.end(), s.begin(),   toupper)  return s  )
- unique(list.begin(), list.end())  list.erase(unique(list.begin(), list.end()), list.end())
- vectorstring result(list.begin() + 5, list.begin() + 15)
- unordered_mapstring, int dict
- dict.insert(key, value)
- auto it = dict.find(key)  if (it != dict.end()) int val = it-second
- dict.count(key)
- dict.erase(key)
- unordered_setstring set
- set.insert(value)
- set.count(value)
- queuestring queue
- queue.push(item)
- string front = queue.front()  queue.pop()
- stackstring stack
- string top = stack.top()  stack.pop()
- class MyInterface  virtual void method() = 0
- class BaseClass  virtual void method() = 0
- class ChildClass   public ParentClass, public Interface
