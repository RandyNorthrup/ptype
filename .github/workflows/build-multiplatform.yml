name: Build P-Type Multi-Platform

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS-ARM
          - os: macos-13
            platform: macOS-Intel
          - os: ubuntu-latest
            platform: Linux
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install pygame pyinstaller pillow numpy pytablericons

      - name: Generate Icons
        run: |
          python - <<'PY'
          from PIL import Image
          import os
          os.makedirs("assets/images", exist_ok=True)
          img_path = "assets/images/spaceship_icon.png"
          ico_path = "assets/images/ptype.ico"
          try:
              img = Image.open(img_path)
          except:
              img = Image.new("RGBA", (512, 512), (138, 43, 226, 255))
          img.save(ico_path, format="ICO", sizes=[(16,16),(32,32),(64,64),(128,128),(256,256),(512,512)])
          if os.name == "posix":
              icns_path = "assets/images/ptype.icns"
              iconset = "assets/images/iconset"
              os.makedirs(iconset, exist_ok=True)
              for size in [16,32,64,128,256,512,1024]:
                  resized = img.resize((size, size))
                  resized.save(f"{iconset}/icon_{size}x{size}.png")
              if sys.platform == "darwin":
                  os.system(f"iconutil -c icns {iconset} -o {icns_path}")
          PY

      - name: Build Executable
        run: pyinstaller ptype.spec

      - name: Package Executable
        run: |
          if [[ "${{ matrix.platform }}" == "Windows" ]]; then
            tar -czvf PType-Windows.tar.gz dist/ptype.exe
          else
            tar -czvf PType-${{ matrix.platform }}.tar.gz dist/ptype
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PType-${{ matrix.platform }}
          path: |
            PType-${{ matrix.platform }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: PType-Windows
      - uses: actions/download-artifact@v4
        with:
          name: PType-macOS-Intel
      - uses: actions/download-artifact@v4
        with:
          name: PType-macOS-ARM
      - uses: actions/download-artifact@v4
        with:
          name: PType-Linux

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            PType-Windows.tar.gz
            PType-macOS-Intel.tar.gz
            PType-macOS-ARM.tar.gz
            PType-Linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
