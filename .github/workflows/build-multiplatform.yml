name: Build P-Type Multi-Platform

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: Windows
            ext: .exe
          - os: macos-latest
            platform: macOS-ARM
            ext: ''
          - os: macos-13
            platform: macOS-Intel
            ext: ''
          - os: ubuntu-latest
            platform: Linux
            ext: ''

    steps:
    - uses: actions/checkout@v4

    # Cache pip dependencies for faster builds
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install pygame pyinstaller pillow numpy pytablericons

    - name: Create data directory
      run: mkdir -p data

    - name: Create Windows icon
      if: runner.os == 'Windows'
      run: |
        python - <<'EOF'
        from PIL import Image
        import os
        os.makedirs('assets/images', exist_ok=True)
        try:
            img = Image.open('assets/images/spaceship_icon.png')
        except:
            img = Image.new('RGBA', (64, 64), (138, 43, 226, 255))
        img.save('assets/images/ptype.ico', format='ICO', sizes=[(16,16), (32,32), (64,64), (256,256)])
        EOF

    - name: Build Windows
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed --name PType --icon=assets/images/ptype.ico \
          --add-data "assets;assets" --add-data "data;data" \
          --hidden-import=numpy --hidden-import=pytablericons ptype.py

    - name: Build macOS ARM
      if: matrix.platform == 'macOS-ARM'
      run: |
        pyinstaller --onefile --windowed --name PType \
          --add-data "assets:assets" --add-data "data:data" \
          --hidden-import=numpy --hidden-import=pytablericons ptype.py

    - name: Build macOS Intel
      if: matrix.platform == 'macOS-Intel'
      run: |
        pyinstaller --onefile --windowed --name PType \
          --add-data "assets:assets" --add-data "data:data" \
          --hidden-import=numpy --hidden-import=pytablericons ptype.py

    - name: Build Linux
      if: runner.os == 'Linux'
      run: |
        pyinstaller --onefile --windowed --name PType \
          --add-data "assets:assets" --add-data "data:data" \
          --hidden-import=numpy --hidden-import=pytablericons ptype.py

    - name: Package Windows
      if: runner.os == 'Windows'
      run: Compress-Archive -Path dist/PType.exe -DestinationPath PType-Windows.zip
      shell: pwsh

    - name: Package macOS/Linux
      if: runner.os != 'Windows'
      run: |
        cd dist && tar -czf ../PType-${{ matrix.platform }}.tar.gz PType${{ matrix.ext }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: PType-${{ matrix.platform }}
        path: PType-${{ matrix.platform }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - uses: actions/download-artifact@v4

    # Extract version number from tag (v1.6.0 â†’ 1.6.0)
    - name: Get Version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: P-Type v${{ steps.get_version.outputs.version }}
        files: |
          PType-Windows/PType-Windows.zip
          PType-macOS-ARM/PType-macOS-ARM.tar.gz
          PType-macOS-Intel/PType-macOS-Intel.tar.gz
          PType-Linux/PType-Linux.tar.gz
        body: |
          # P-Type v${{ steps.get_version.outputs.version }}
          
          ## ðŸ“¥ Downloads
          - **Windows**: PType-Windows.zip
          - **macOS ARM**: PType-macOS-ARM.tar.gz
          - **macOS Intel**: PType-macOS-Intel.tar.gz
          - **Linux**: PType-Linux.tar.gz
          
          ## ðŸŽ® Core Features
          - 100 progressive difficulty levels
          - 7 programming languages and English for practice
          - Aggressive boss AI with smart tracking
          - 19+ unlockable achievements
          - Multiple player profiles
          - Detailed statistics tracking
          - Save/load system
